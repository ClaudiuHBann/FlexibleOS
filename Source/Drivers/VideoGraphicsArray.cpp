#include <Drivers/VideoGraphicsArray.h>

unsigned char g_40x25_text[] = {
    /* MISC */
    0x67,
    /* SEQ */
    0x03, 0x08, 0x03, 0x00, 0x02,
    /* CRTC */
    0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F,
    0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0xA0,
    0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x0C, 0x00, 0x0F, 0x08, 0x00};

unsigned char g_40x50_text[] = {
    /* MISC */
    0x67,
    /* SEQ */
    0x03, 0x08, 0x03, 0x00, 0x02,
    /* CRTC */
    0x2D, 0x27, 0x28, 0x90, 0x2B, 0xA0, 0xBF, 0x1F,
    0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x04, 0x60,
    0x9C, 0x8E, 0x8F, 0x14, 0x1F, 0x96, 0xB9, 0xA3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x0C, 0x00, 0x0F, 0x08, 0x00};

unsigned char g_80x25_text[] = {
    /* MISC */
    0x67,
    /* SEQ */
    0x03, 0x00, 0x03, 0x00, 0x02,
    /* CRTC */
    0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F,
    0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x50,
    0x9C, 0x0E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x0C, 0x00, 0x0F, 0x08, 0x00};

unsigned char g_80x50_text[] = {
    /* MISC */
    0x67,
    /* SEQ */
    0x03, 0x00, 0x03, 0x00, 0x02,
    /* CRTC */
    0x5F, 0x4F, 0x50, 0x82, 0x55, 0x81, 0xBF, 0x1F,
    0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x01, 0x40,
    0x9C, 0x8E, 0x8F, 0x28, 0x1F, 0x96, 0xB9, 0xA3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x0C, 0x00, 0x0F, 0x08, 0x00};

unsigned char g_90x30_text[] = {
    /* MISC */
    0xE7,
    /* SEQ */
    0x03, 0x01, 0x03, 0x00, 0x02,
    /* CRTC */
    0x6B, 0x59, 0x5A, 0x82, 0x60, 0x8D, 0x0B, 0x3E,
    0x00, 0x4F, 0x0D, 0x0E, 0x00, 0x00, 0x00, 0x00,
    0xEA, 0x0C, 0xDF, 0x2D, 0x10, 0xE8, 0x05, 0xA3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x0C, 0x00, 0x0F, 0x08, 0x00};

unsigned char g_90x60_text[] = {
    /* MISC */
    0xE7,
    /* SEQ */
    0x03, 0x01, 0x03, 0x00, 0x02,
    /* CRTC */
    0x6B, 0x59, 0x5A, 0x82, 0x60, 0x8D, 0x0B, 0x3E,
    0x00, 0x47, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
    0xEA, 0x0C, 0xDF, 0x2D, 0x08, 0xE8, 0x05, 0xA3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x0E, 0x00,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x0C, 0x00, 0x0F, 0x08, 0x00};

unsigned char g_640x480x2[] = {
    /* MISC */
    0xE3,
    /* SEQ */
    0x03, 0x01, 0x0F, 0x00, 0x06,
    /* CRTC */
    0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0x0B, 0x3E,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xEA, 0x0C, 0xDF, 0x28, 0x00, 0xE7, 0x04, 0xE3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0F,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x01, 0x00, 0x0F, 0x00, 0x00};

unsigned char g_320x200x4[] = {
    /* MISC */
    0x63,
    /* SEQ */
    0x03, 0x09, 0x03, 0x00, 0x02,
    /* CRTC */
    0x2D, 0x27, 0x28, 0x90, 0x2B, 0x80, 0xBF, 0x1F,
    0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x9C, 0x0E, 0x8F, 0x14, 0x00, 0x96, 0xB9, 0xA3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00,
    0xFF,
    /* AC */
    0x00, 0x13, 0x15, 0x17, 0x02, 0x04, 0x06, 0x07,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
    0x01, 0x00, 0x03, 0x00, 0x00};

unsigned char g_640x480x16[] = {
    /* MISC */
    0xE3,
    /* SEQ */
    0x03, 0x01, 0x08, 0x00, 0x06,
    /* CRTC */
    0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0x0B, 0x3E,
    0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xEA, 0x0C, 0xDF, 0x28, 0x00, 0xE7, 0x04, 0xE3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05, 0x0F,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x14, 0x07,
    0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
    0x01, 0x00, 0x0F, 0x00, 0x00};

unsigned char g_720x480x16[] = {
    /* MISC */
    0xE7,
    /* SEQ */
    0x03, 0x01, 0x08, 0x00, 0x06,
    /* CRTC */
    0x6B, 0x59, 0x5A, 0x82, 0x60, 0x8D, 0x0B, 0x3E,
    0x00, 0x40, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00,
    0xEA, 0x0C, 0xDF, 0x2D, 0x08, 0xE8, 0x05, 0xE3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x05, 0x0F,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
    0x01, 0x00, 0x0F, 0x00, 0x00};

unsigned char g_320x200x256[] = {
    /* MISC */
    0x63,
    /* SEQ */
    0x03, 0x01, 0x0F, 0x00, 0x0E,
    /* CRTC */
    0x5F, 0x4F, 0x50, 0x82, 0x54, 0x80, 0xBF, 0x1F,
    0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x9C, 0x0E, 0x8F, 0x28, 0x40, 0x96, 0xB9, 0xA3,
    0xFF,
    /* GC */
    0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x0F,
    0xFF,
    /* AC */
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
    0x41, 0x00, 0x0F, 0x00, 0x00};

VideoGraphicsArray::VideoGraphicsArray() : miscPort(0x3c2),
                                           crtcIndexPort(0x3d4),
                                           crtcDataPort(0x3d5),
                                           sequencerIndexPort(0x3c4),
                                           sequencerDataPort(0x3c5),
                                           graphicsControllerIndexPort(0x3ce),
                                           graphicsControllerDataPort(0x3cf),
                                           attributeControllerIndexPort(0x3c0),
                                           attributeControllerReadPort(0x3c1),
                                           attributeControllerWritePort(0x3c0),
                                           attributeControllerResetPort(0x3da)
{
}

VideoGraphicsArray::~VideoGraphicsArray()
{
}

void VideoGraphicsArray::WriteRegisters(uint8_t *registers)
{
    //  misc
    miscPort.Write(*(registers++));

    // sequencer
    for (uint8_t i = 0; i < 5; i++)
    {
        sequencerIndexPort.Write(i);
        sequencerDataPort.Write(*(registers++));
    }

    // cathode ray tube controller
    crtcIndexPort.Write(0x03);
    crtcDataPort.Write(crtcDataPort.Read() | 0x80);
    crtcIndexPort.Write(0x11);
    crtcDataPort.Write(crtcDataPort.Read() & ~0x80);
    registers[0x03] = registers[0x03] | 0x80;
    registers[0x11] = registers[0x11] & ~0x80;
    for (uint8_t i = 0; i < 25; i++)
    {
        crtcIndexPort.Write(i);
        crtcDataPort.Write(*(registers++));
    }

    // graphics controller
    for (uint8_t i = 0; i < 9; i++)
    {
        graphicsControllerIndexPort.Write(i);
        graphicsControllerDataPort.Write(*(registers++));
    }

    // attribute controller
    for (uint8_t i = 0; i < 21; i++)
    {
        attributeControllerResetPort.Read();
        attributeControllerIndexPort.Write(i);
        attributeControllerWritePort.Write(*(registers++));
    }

    attributeControllerResetPort.Read();
    attributeControllerIndexPort.Write(0x20);
}

bool VideoGraphicsArray::SupportsTextMode(uint32_t width, uint32_t height)
{
    return ((width == 40 && height == 25) ||
            (width == 320 && height == 200) ||
            (width == 40 && height == 50) ||
            (width == 320 && height == 400) ||
            (width == 80 && height == 25) ||
            (width == 720 && height == 400) ||
            (width == 80 && height == 50) ||
            (width == 640 && height == 400) ||
            (width == 90 && height == 30) ||
            (width == 90 && height == 60));
}

bool VideoGraphicsArray::SupportsGraphicMode(uint32_t width, uint32_t height, uint32_t colordepth)
{
    return ((width == 640 && height == 480 && colordepth == 2) ||
            (width == 320 && height == 200 && colordepth == 4) ||
            (width == 640 && height == 480 && colordepth == 16) ||
            (width == 720 && height == 480 && colordepth == 16) ||
            (width == 320 && height == 200 && colordepth == 256));
}

bool VideoGraphicsArray::SetTextMode(uint32_t width, uint32_t height)
{
    if (!SupportsTextMode(width, height))
    {
        return false;
    }

    if ((width == 40 && height == 25) ||
        (width == 320 && height == 200))
    {
        WriteRegisters(g_40x25_text);
    }
    else if ((width == 40 && height == 50) ||
             (width == 320 && height == 400))
    {
        WriteRegisters(g_40x50_text);
    }
    else if ((width == 80 && height == 25) ||
             (width == 720 && height == 400))
    {
        WriteRegisters(g_80x25_text);
    }
    else if ((width == 80 && height == 50) ||
             (width == 640 && height == 400))
    {
        WriteRegisters(g_80x50_text);
    }
    else if (width == 90 && height == 30)
    {
        WriteRegisters(g_90x30_text);
    }
    else if (width == 90 && height == 60)
    {
        WriteRegisters(g_90x60_text);
    }

    return true;
}

bool VideoGraphicsArray::SetGraphicMode(uint32_t width, uint32_t height, uint32_t colordepth)
{
    if (!SupportsGraphicMode(width, height, colordepth))
    {
        return false;
    }

    if (width == 640 && height == 480 && colordepth == 2)
    {
        WriteRegisters(g_640x480x2);
        m_sizeX = 640;
        m_sizeY = 480;
    }
    else if (width == 320 && height == 200 && colordepth == 4)
    {
        WriteRegisters(g_320x200x4);
        m_sizeX = 320;
        m_sizeY = 200;
    }
    else if (width == 640 && height == 480 && colordepth == 16)
    {
        WriteRegisters(g_640x480x16);
        m_sizeX = 640;
        m_sizeY = 480;
    }
    else if (width == 720 && height == 480 && colordepth == 16)
    {
        WriteRegisters(g_720x480x16);
        m_sizeX = 720;
        m_sizeY = 480;
    }
    else if (width == 320 && height == 200 && colordepth == 256)
    {
        WriteRegisters(g_320x200x256);
        m_sizeX = 320;
        m_sizeY = 200;
    }

    return true;
}

uint8_t *VideoGraphicsArray::GetFrameBufferSegment()
{
    graphicsControllerIndexPort.Write(0x06);
    uint8_t segmentNumber = graphicsControllerDataPort.Read() & (3 << 2);

    switch (segmentNumber)
    {
    case 0 << 2:
        return (uint8_t *)0x00000;
    case 1 << 2:
        return (uint8_t *)0xA0000;
    case 2 << 2:
        return (uint8_t *)0xB0000;
    case 3 << 2:
        return (uint8_t *)0xB8000;
    }
}

void VideoGraphicsArray::PutPixel(uint32_t x, uint32_t y, uint8_t colorIndex)
{
    uint8_t *pixelAddress = GetFrameBufferSegment() + m_sizeX * y + x;
    *pixelAddress = colorIndex;
}

uint8_t VideoGraphicsArray::GetColorIndex(uint8_t r, uint8_t g, uint8_t b)
{
    return 0x00;
}

void VideoGraphicsArray::PutPixel(uint32_t x, uint32_t y, uint8_t r, uint8_t g, uint8_t b)
{
    PutPixel(x, y, GetColorIndex(r, g, b));
}

void VideoGraphicsArray::ClearScreen(uint8_t colorIndex /* = 0*/)
{
    for (int32_t y = 0; y < m_sizeY; y++)
    {
        for (int32_t x = 0; x < m_sizeX; x++)
        {
            PutPixel(x, y, colorIndex);
        }
    }
}